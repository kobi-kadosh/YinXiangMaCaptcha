@* Generator: WebPagesHelper *@

@using System.Text
@using Newtonsoft.Json
@using YinXiangMa_lib

@functions
{
    private const string YXM_Url = "http://api.yinxiangma.com/api3/yzm.yinxiangma.php";
    // TODO: no https for YXM
    private const string YXM_SecureUrl = YXM_Url;
    private const string YXM_Version = "YinXiangMaJsSDK_4.0";//"YinXiangMaDotNetSDK_4.0";

    internal static bool HandleValidateResponse(HttpContextBase context, string response)
    {
        if (!String.IsNullOrEmpty(response))
        {
            return response == "true";
        }
        return false;
    }

    private static string GetUrlHelper(HttpContextBase context, string publicKey)
    {
        if (String.IsNullOrEmpty(publicKey))
        {
            throw new ArgumentException("arg can't be null", "publicKey");
        }

        var builder = new StringBuilder(context.Request.IsSecureConnection ? YXM_SecureUrl : YXM_Url);
        builder.AppendFormat("?pk={0}", publicKey);
        builder.AppendFormat("&v={0}", YXM_Version);
        return builder.ToString();
    }

    internal static string GetChallengeUrl(HttpContextBase httpContext, string publicKey = null)
    {
        return GetUrlHelper(httpContext, publicKey);
    }

    private static string ExecuteValidateRequest(HttpContextBase context, string privateKey)
    {
        return YinXiangMa.Check_Answer(privateKey, context.Request.Form["YinXiangMa_challenge"], context.Request.Form["YXM_level"], context.Request.Form["YXM_input_result"]);
    }

    internal static bool Validate(HttpContextBase context, string privateKey)
    {
        if (String.IsNullOrEmpty(privateKey))
        {
            throw new ArgumentException("arg can't be null", "privateKey");
        }

        string result = ExecuteValidateRequest(context, privateKey);

        return HandleValidateResponse(context, result);
    }

    public static bool Validate(string privateKey = null)
    {
        return Validate(HttpContext.Current == null ? null : new HttpContextWrapper(HttpContext.Current), privateKey);
    }

}

@helper GetHtml(HttpContextBase httpContext, string publicKey = null, object options = null)
{
    if (options != null)
    {
        var optionJson = new HtmlString(JsonConvert.SerializeObject(options));
        <script>
            var captcha_YXM_Options = @optionJson;
        </script>
    }
    else
    {
        <script>
            var captcha_YXM_Options = {};
        </script>
    }

    <script>
        // override YXM default behavior only if enableFromSubmitCheck not true
        if (!captcha_YXM_Options.enableFromSubmitCheck) {

            // set dummies to fool YXM, this will prevent creating of YinXiangMa object
            var YinXiangMa = {};

            YinXiangMa.init = function () { };
        }
    </script>

    <input type='hidden' id='YXM_here' />

    <script type='text/javascript' charset='gbk' id='YXM_script' src="@GetChallengeUrl(httpContext, publicKey)"></script>

    <script type='text/javascript' charset='gbk'>

        // TODO: integrate with jquery validation
        // override YXM default behavior only if enableFromSubmitCheck not true
        if (!captcha_YXM_Options.enableFromSubmitCheck) {

            // keep tying until condition satisfied % callback called
            function fireWhenReady(conditionFunc, callback) {
                if (jQuery.isFunction(conditionFunc) && conditionFunc() && callback) {
                    callback();
                }
                else {
                    setTimeout(function() {
                        fireWhenReady(conditionFunc, callback);
                    }, 100);
                }
            }

            // init YinXiangMa without form submit event
            function YinXiangMaInitPatch() {

                // init YXM object instead of them
                YinXiangMa = new YinXiangMaObject(YinXiangMaDataJson);

                YinXiangMa.initcss();

                // init YXM, set captcha html
                (function(YinXiangMa, data) {
                    var c = YinXiangMa.html[data.type];
                    if (c != undefined) {
                        YXM_here.outerHTML = c;
                        YinXiangMa._bn();
                    } else {
                        YinXiangMa.exception();
                    }
                })(YinXiangMa, YXM_YinXiangMaData || YinXiangMaDataJson);
            }

            @*
            // when YXM script is loaded use our patch init
            $(document).on('load','#YXM_script',YinXiangMaInitPatch);
            *@

            $(function() {
                fireWhenReady(function() {
                        return typeof YinXiangMaObject !== 'undefined';
                    }, YinXiangMaInitPatch);
            });

        }

        @if (HttpContext.Current.IsDebuggingEnabled)
        {
            <text>  function YXM_valided_true() {
            console.log("good captcha");
        }
        function YXM_valided_false() {
            console.log("bad captcha");
        }</text>
        }
        else
        {
            <text>  function YXM_valided_true() {
        }
        function YXM_valided_false() {
        }</text>
        }

    </script>

}
